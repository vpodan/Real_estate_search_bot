# hybrid_pipeline.py
import hashlib
from pymongo import MongoClient
from real_estate_vector_db import RealEstateVectorDB

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = MongoClient("mongodb://localhost:27017/")
db = client["real_estate"]
collection_rent = db["rent_listings"]
collection_sale = db["sale_listings"]

class HybridMongoDBPipeline:
    """
    Pipeline –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –≤ MongoDB –∏ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
    """
    
    def open_spider(self, spider):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–ø–∞–π–¥–µ—Ä–∞"""
        self.collection = collection_rent if spider.name == 'RentSpider' else collection_sale
        self.collection_type = 'rent' if spider.name == 'RentSpider' else 'sale'
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
        try:
            self.vector_db = RealEstateVectorDB()
            print(f"‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {spider.name}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î: {e}")
            self.vector_db = None

    def process_item(self, item, spider):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ - —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ MongoDB –∏ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î"""
        
        # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB –∫–∞–∫ –æ–±—ã—á–Ω–æ
        if not item.get('_id'):
            item['_id'] = hashlib.md5((item.get('link') or '').encode('utf-8')).hexdigest()

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            result = self.collection.update_one(
                {'_id': item['_id']}, 
                {'$set': dict(item)}, 
                upsert=True
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç MongoDB –æ–ø–µ—Ä–∞—Ü–∏–∏
            if result.upserted_id:
                print(f"‚úÖ –ù–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ MongoDB: {item['_id']}")
                is_new_item = True
            elif result.modified_count > 0:
                print(f"üîÑ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ MongoDB: {item['_id']}")
                is_new_item = False
            else:
                print(f"‚ÑπÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ MongoDB: {item['_id']}")
                is_new_item = False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ MongoDB: {e}")
            return item

        # 2. –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç)
        if self.vector_db and self._has_text_content(item):
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                if is_new_item or result.modified_count > 0:
                    self.vector_db.add_listing_to_vector_db(dict(item), self.collection_type)
                    print(f"‚úÖ –û–±—ä—è–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î: {item['_id']}")
                else:
                    print(f"‚ÑπÔ∏è –û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î: {item['_id']}")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞

        return item

    def _has_text_content(self, item):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        
        Args:
            item (dict): –î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        """
        return bool(
            item.get('description') or 
            item.get('features_by_category') or 
            item.get('title')
        )

    def close_spider(self, spider):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–ø–∞–π–¥–µ—Ä–∞"""
        if self.vector_db:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã {spider.name}:")
            self.vector_db.get_stats()


# –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ scarpy.py –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–∏—Ç—å:
# 'ITEM_PIPELINES': {'__main__.MongoDBPipeline': 1}
# –Ω–∞:
# 'ITEM_PIPELINES': {'hybrid_pipeline.HybridMongoDBPipeline': 1}
