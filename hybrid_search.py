# hybrid_search.py
from typing import List, Dict, Optional, Union
from pymongo import MongoClient
from real_estate_vector_db import RealEstateVectorDB

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = MongoClient("mongodb://localhost:27017/")
db = client["real_estate"]
collection_rent = db["rent_listings"]
collection_sale = db["sale_listings"]

class HybridRealEstateSearch:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
    –ö–æ–º–±–∏–Ω–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –≤ MongoDB —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        self.vector_db = RealEstateVectorDB()
        self.rent_collection = collection_rent
        self.sale_collection = collection_sale
    
    def search(self, 
               filters: Dict = None, 
               semantic_query: str = None,
               listing_type: str = "both",
               limit: int = 100) -> List[Dict]:
        """
        –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        
        Args:
            filters (Dict): –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è MongoDB
            semantic_query (str): –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            listing_type (str): "rent", "sale" –∏–ª–∏ "both"
            limit (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            List[Dict]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        """
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫:")
        print(f"   –§–∏–ª—å—Ç—Ä—ã: {filters}")
        print(f"   –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å: '{semantic_query}'")
        print(f"   –¢–∏–ø –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {listing_type}")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤ –∫–∞–∫–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö –∏—Å–∫–∞—Ç—å
        collections_to_search = self._get_collections_to_search(listing_type)
        
        all_results = []
        
        for collection_name, collection in collections_to_search.items():
            print(f"\nüìä –ü–æ–∏—Å–∫ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {collection_name}")
            
            # –≠—Ç–∞–ø 1: –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤ MongoDB
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å, –∏—â–µ–º –í–°–ï –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ MongoDB
            # —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –ø—Ä–æ–≤–µ—Å—Ç–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º
            if semantic_query and semantic_query.strip():
                mongo_limit = 10000  # –ë–æ–ª—å—à–æ–π –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            else:
                mongo_limit = limit  # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π –ª–∏–º–∏—Ç
            
            mongo_results = self._mongodb_filter(collection, filters, mongo_limit)
            mongo_ids = [str(result["_id"]) for result in mongo_results]
            

            
            if not mongo_ids:
                print(f"   –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ {collection_name}")
                continue
            
            # –≠—Ç–∞–ø 2: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ (–µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å)
            if semantic_query and semantic_query.strip():
                print(f"   –í—ã–ø–æ–ª–Ω—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫...")
                
                vector_results = self.vector_db.semantic_search(
                    query=semantic_query,
                    collection_type=collection_name,
                    mongo_ids=mongo_ids,  # –ò—â–µ–º —Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö MongoDB
                    top_k=min(limit, len(mongo_ids))
                )
                
                print(f"   –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞—à–µ–ª: {len(vector_results)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö")
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MongoDB —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                combined_results = self._combine_mongo_and_vector_results(
                    mongo_results, vector_results, collection_name
                )
                
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ MongoDB —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                print(f"   –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø—Ä–æ–ø—É—â–µ–Ω")
                combined_results = self._format_mongo_results(mongo_results, collection_name)
            
            all_results.extend(combined_results)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        final_results = self._rank_and_limit_results(all_results, limit)
        
        print(f"\n‚úÖ –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(final_results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
        return final_results
    
    def _get_collections_to_search(self, listing_type: str) -> Dict:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤ –∫–∞–∫–∏—Ö –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö MongoDB –∏—Å–∫–∞—Ç—å"""
        if listing_type == "rent":
            return {"rent": self.rent_collection}
        elif listing_type == "sale":
            return {"sale": self.sale_collection}
        else:  # both
            return {"rent": self.rent_collection, "sale": self.sale_collection}
    
    def _mongodb_filter(self, collection, filters: Dict, limit: int) -> List[Dict]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –≤ MongoDB
        
        Args:
            collection: MongoDB –∫–æ–ª–ª–µ–∫—Ü–∏—è
            filters (Dict): –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
            limit (int): –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            List[Dict]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ MongoDB
        """
        if not filters:
            filters = {}
        
        # –°—Ç—Ä–æ–∏–º MongoDB –∑–∞–ø—Ä–æ—Å
        mongo_query = {}
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
        if filters.get("city"):
            mongo_query["city"] = {"$regex": filters["city"], "$options": "i"}
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–π–æ–Ω—É
        if filters.get("district"):
            mongo_query["district"] = {"$regex": filters["district"], "$options": "i"}
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∫–æ–º–Ω–∞—Ç
        if filters.get("rooms"):
            if isinstance(filters["rooms"], list):
                mongo_query["room_count"] = {"$in": filters["rooms"]}
            else:
                mongo_query["room_count"] = filters["rooms"]
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
        price_filter = {}
        if filters.get("min_price"):
            price_filter["$gte"] = filters["min_price"]
        if filters.get("max_price"):
            price_filter["$lte"] = filters["max_price"]
        if price_filter:
            mongo_query["price"] = price_filter
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–ª–æ—â–∞–¥–∏
        area_filter = {}
        if filters.get("min_area"):
            area_filter["$gte"] = filters["min_area"]
        if filters.get("max_area"):
            area_filter["$lte"] = filters["max_area"]
        if area_filter:
            mongo_query["space_sm"] = area_filter
        
        # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –∑–¥–∞–Ω–∏—è
        if filters.get("building_type"):
            mongo_query["building_type"] = filters["building_type"]
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É –ø–æ—Å—Ç—Ä–æ–π–∫–∏
        if filters.get("min_year"):
            mongo_query["build_year"] = {"$gte": str(filters["min_year"])}
        
        # –ù–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        if filters.get("market_type"):
            mongo_query["market_type"] = filters["market_type"]
        if filters.get("stan_wykonczenia"):
            mongo_query["stan_wykonczenia"] = filters["stan_wykonczenia"]
        if filters.get("building_material"):
            mongo_query["building_material"] = filters["building_material"]
        if filters.get("ogrzewanie"):
            mongo_query["ogrzewanie"] = filters["ogrzewanie"]
        
        # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
        if filters.get("min_build_year") or filters.get("max_build_year"):
            build_year_filter = {}
            if filters.get("min_build_year"):
                build_year_filter["$gte"] = str(filters["min_build_year"])
            if filters.get("max_build_year"):
                build_year_filter["$lte"] = str(filters["max_build_year"])
            mongo_query["build_year"] = build_year_filter
        
        # –§–∏–ª—å—Ç—Ä –ø–æ czynszu (–¥–ª—è –∞—Ä–µ–Ω–¥—ã)
        if filters.get("max_czynsz"):
            mongo_query["czynsz"] = {"$lte": filters["max_czynsz"]}
        
        # –§–∏–ª—å—Ç—Ä—ã –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º
        if filters.get("has_garage") is not None:
            mongo_query["has_garage"] = filters["has_garage"]
        if filters.get("has_parking") is not None:
            mongo_query["has_parking"] = filters["has_parking"]
        if filters.get("has_balcony") is not None:
            mongo_query["has_balcony"] = filters["has_balcony"]
        if filters.get("has_elevator") is not None:
            mongo_query["has_elevator"] = filters["has_elevator"]
        if filters.get("has_air_conditioning") is not None:
            mongo_query["has_air_conditioning"] = filters["has_air_conditioning"]
        if filters.get("pets_allowed") is not None:
            mongo_query["pets_allowed"] = filters["pets_allowed"]
        if filters.get("furnished") is not None:
            mongo_query["furnished"] = filters["furnished"]
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        try:
            cursor = collection.find(mongo_query).limit(limit)
            results = list(cursor)
            print(f"   MongoDB –∑–∞–ø—Ä–æ—Å: {mongo_query}")
            print(f"   MongoDB –Ω–∞—à–µ–ª: {len(results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
            return results
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ MongoDB –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return []
    
    def _combine_mongo_and_vector_results(self, mongo_results: List[Dict], 
                                        vector_results: List[Dict], 
                                        collection_type: str) -> List[Dict]:
        """
        –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ MongoDB —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        
        Args:
            mongo_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ MongoDB
            vector_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            collection_type: –¢–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ('rent' –∏–ª–∏ 'sale')
            
        Returns:
            List[Dict]: –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        """
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ MongoDB –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ ID
        mongo_dict = {str(doc["_id"]): doc for doc in mongo_results}
        
        combined = []
        for vector_result in vector_results:
            listing_id = vector_result["id"]
            
            if listing_id in mongo_dict:
                # –ë–µ—Ä–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ MongoDB (—É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ)
                full_listing = mongo_dict[listing_id].copy()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                # Score - –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: —á–µ–º –±–ª–∏–∂–µ –∫ 1, —Ç–µ–º –ª—É—á—à–µ
                full_listing["semantic_score"] = float(vector_result["score"])
                full_listing["collection_type"] = collection_type
                full_listing["search_relevance"] = "hybrid_match"
                
                combined.append(full_listing)
        
        return combined
    
    def _format_mongo_results(self, mongo_results: List[Dict], collection_type: str) -> List[Dict]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–æ–ª—å–∫–æ –∏–∑ MongoDB (–±–µ–∑ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞)
        
        Args:
            mongo_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ MongoDB
            collection_type: –¢–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            
        Returns:
            List[Dict]: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        """
        formatted = []
        for result in mongo_results:
            result_copy = result.copy()
            result_copy["collection_type"] = collection_type
            result_copy["search_relevance"] = "filter_match"
            result_copy["semantic_score"] = 0.0  # –ù–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫–æ—Ä–∞
            formatted.append(result_copy)
        
        return formatted
    
    def _rank_and_limit_results(self, results: List[Dict], limit: int) -> List[Dict]:
        """
        –†–∞–Ω–∂–∏—Ä—É–µ—Ç –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        
        Args:
            results: –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            List[Dict]: –û—Ç—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        """
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É —Å–∫–æ—Ä—É (–µ—Å–ª–∏ –µ—Å—Ç—å), –ø–æ—Ç–æ–º –ø–æ —Ü–µ–Ω–µ
        def sort_key(item):
            semantic_score = item.get("semantic_score", 0.0)
            price = item.get("price", 0)
            
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–º—É –ø–æ–∏—Å–∫—É, –ø–æ—Ç–æ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω—ã
            return (-semantic_score, -price)
        
        sorted_results = sorted(results, key=sort_key)
        return sorted_results[:limit]


def test_hybrid_search():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    search_engine = HybridRealEstateSearch()
    
    # –¢–µ—Å—Ç 1: –¢–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    print("=== –¢–µ—Å—Ç 1: –¢–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä—ã ===")
    results1 = search_engine.search(
        filters={"city": "Warszawa",  "max_price": 8000000},
        listing_type="buy",
        limit=1000
    )
    print(f"–ù–∞–π–¥–µ–Ω–æ: {len(results1)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
    if results1:
        print(f"\n–ü–µ—Ä–≤—ã–µ {min(3, len(results1))} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ —Ñ–∏–ª—å—Ç—Ä—ã):")
        for i, result in enumerate(results1[:3], 1):
            print(f"\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç {i} ---")
            print(f"ID: {result['_id']}")
            print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {result.get('title', 'N/A')}")
            print(f"–¶–µ–Ω–∞: {result.get('price', 'N/A')} –∑–ª")
            print(f"–ö–æ–º–Ω–∞—Ç—ã: {result.get('room_count', 'N/A')}")
            print(f"–ü–ª–æ—â–∞–¥—å: {result.get('space_sm', 'N/A')} –º¬≤")
            print(f"–ì–æ—Ä–æ–¥: {result.get('city', 'N/A')}")
            if result.get('district'):
                print(f"–†–∞–π–æ–Ω: {result.get('district', 'N/A')}")
            print(f"–°—Å—ã–ª–∫–∞: {result.get('link', 'N/A')}")
    
    # –¢–µ—Å—Ç 2: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ + —Ñ–∏–ª—å—Ç—Ä—ã
    print("\n=== –¢–µ—Å—Ç 2: –§–∏–ª—å—Ç—Ä—ã + —Å–µ–º–∞–Ω—Ç–∏–∫–∞ ===")
    results2 = search_engine.search(
        filters={"city": "Warszawa", "max_price": 8000000},
        semantic_query="blizko centrum",
        listing_type="buy",
        limit=1000
    )
    print(f"–ù–∞–π–¥–µ–Ω–æ: {len(results2)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if results2:
        print(f"\n–ü–µ—Ä–≤—ã–µ {min(5, len(results2))} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        for i, result in enumerate(results2[:5], 1):
            print(f"\n--- –†–µ–∑—É–ª—å—Ç–∞—Ç {i} ---")
            print(f"ID: {result['_id']}")
            print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {result.get('title', 'N/A')}")
            print(f"–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Å–∫–æ—Ä: {result.get('semantic_score', 0):.3f} (–∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: —á–µ–º –±–ª–∏–∂–µ –∫ 1, —Ç–µ–º –ª—É—á—à–µ)")
            print(f"–¶–µ–Ω–∞: {result.get('price', 'N/A')} –∑–ª")
            print(f"–ö–æ–º–Ω–∞—Ç—ã: {result.get('room_count', 'N/A')}")
            print(f"–ü–ª–æ—â–∞–¥—å: {result.get('space_sm', 'N/A')} –º¬≤")
            print(f"–ì–æ—Ä–æ–¥: {result.get('city', 'N/A')}")
            if result.get('district'):
                print(f"–†–∞–π–æ–Ω: {result.get('district', 'N/A')}")
            print(f"–°—Å—ã–ª–∫–∞: {result.get('link', 'N/A')}")
            if result.get('description'):
                desc_preview = result['description'][:200] + "..." if len(result['description']) > 200 else result['description']
                print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {desc_preview}")


if __name__ == "__main__":
    test_hybrid_search()
