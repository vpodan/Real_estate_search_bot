# real_estate_vector_db.py
import os
from typing import List, Dict, Optional
from langchain.schema import Document
from langchain_chroma import Chroma
from pymongo import MongoClient
from real_estate_embedding_function import get_embedding_function, create_listing_text_for_embedding

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
CHROMA_PATH = "chroma_real_estate"

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
client = MongoClient("mongodb://localhost:27017/")
db = client["real_estate"]
collection_rent = db["rent_listings"]
collection_sale = db["sale_listings"]

class RealEstateVectorDB:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"""
        self.embedding_function = get_embedding_function()
        self.db = Chroma(
            persist_directory=CHROMA_PATH,
            embedding_function=self.embedding_function,
            collection_metadata={"hnsw:space": "cosine"}  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
        )
    
    def add_listing_to_vector_db(self, listing_data: Dict, collection_type: str):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            listing_data (dict): –î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ MongoDB
            collection_type (str): 'rent' –∏–ª–∏ 'sale'
        """
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è embedding
        text_content = create_listing_text_for_embedding(listing_data)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        listing_id = listing_data.get("_id")
        if not listing_id:
            print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±–µ–∑ ID: {listing_data}")
            return
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        metadata = {
            "id": listing_id,
            "collection_type": collection_type,  # rent –∏–ª–∏ sale
            "city": listing_data.get("city", ""),
            "district": listing_data.get("district", ""),
            "room_count": listing_data.get("room_count"),
            "price": listing_data.get("price"),
            "building_type": listing_data.get("building_type", ""),
            "has_description": bool(listing_data.get("description")),
            "has_features": bool(listing_data.get("features_by_category"))
        }
        
        # –°–æ–∑–¥–∞–µ–º Document –¥–ª—è Chroma
        document = Document(
            page_content=text_content,
            metadata=metadata
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç
        existing = self.db.get(ids=[listing_id], include=[])
        
        if existing['ids']:
            print(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {listing_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
        try:
            self.db.add_documents([document], ids=[listing_id])
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ {listing_id} –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ {listing_id}: {e}")
    
    def populate_from_mongo(self, limit: Optional[int] = None):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ MongoDB –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
        
        Args:
            limit (int, optional): –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞
        """
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –æ–±—ä—è–≤–ª–µ–Ω–∏–π –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
        print("üìç –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã...")
        rent_query = {}
        if limit:
            rent_listings = list(collection_rent.find(rent_query).limit(limit))
        else:
            rent_listings = list(collection_rent.find(rent_query))
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(rent_listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∞—Ä–µ–Ω–¥—ã")
        
        for listing in rent_listings:
            self.add_listing_to_vector_db(listing, "rent")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏
        print("\nüìç –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–∂–∏...")
        sale_query = {}
        if limit:
            sale_listings = list(collection_sale.find(sale_query).limit(limit))
        else:
            sale_listings = list(collection_sale.find(sale_query))
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(sale_listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø—Ä–æ–¥–∞–∂–∏")
        
        for listing in sale_listings:
            self.add_listing_to_vector_db(listing, "sale")
        
        print(f"\n‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(rent_listings) + len(sale_listings)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    
    def semantic_search(self, query: str, collection_type: Optional[str] = None, 
                       mongo_ids: Optional[List[str]] = None, top_k: int = 10) -> List[Dict]:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º
        
        Args:
            query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            collection_type (str, optional): 'rent' –∏–ª–∏ 'sale'
            mongo_ids (List[str], optional): –°–ø–∏—Å–æ–∫ ID –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–∏–∑ MongoDB)
            top_k (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            List[Dict]: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        """
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
        filter_dict = {}
        if collection_type:
            filter_dict["collection_type"] = collection_type
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º —Å–ª–æ–∂–Ω—É—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ ID - —Å–¥–µ–ª–∞–µ–º –ø–æ—Å—Ç—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        # if mongo_ids:
        #     filter_dict["id"] = {"$in": mongo_ids}
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        try:
            # –ï—Å–ª–∏ –µ—Å—Ç—å mongo_ids, –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º k –¥–ª—è –ª—É—á—à–µ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            search_k = top_k * 20 if mongo_ids else top_k
            results = self.db.similarity_search_with_score(
                query=query,
                k=search_k,
                filter=filter_dict if filter_dict else None
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ—Å—Ç—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ mongo_ids
            formatted_results = []
            for doc, score in results:
                doc_id = doc.metadata["id"]
                
                # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã mongo_ids, —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if mongo_ids and doc_id not in mongo_ids:
                    continue
                
                result = {
                    "id": doc_id,
                    "score": score,  # –ö–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: —á–µ–º –±–ª–∏–∂–µ –∫ 1, —Ç–µ–º –ª—É—á—à–µ
                    "content": doc.page_content,
                    "metadata": doc.metadata
                }
                formatted_results.append(result)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ top_k
                if len(formatted_results) >= top_k:
                    break
            
            return formatted_results
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
            return []
    
    def get_stats(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î"""
        try:
            all_docs = self.db.get(include=['metadatas'])
            total_count = len(all_docs['ids'])
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Ç–∏–ø–∞–º
            rent_count = sum(1 for meta in all_docs['metadatas'] 
                           if meta.get('collection_type') == 'rent')
            sale_count = sum(1 for meta in all_docs['metadatas'] 
                           if meta.get('collection_type') == 'sale')
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î:")
            print(f"   –í—Å–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {total_count}")
            print(f"   –ê—Ä–µ–Ω–¥–∞: {rent_count}")
            print(f"   –ü—Ä–æ–¥–∞–∂–∞: {sale_count}")
            
            return {
                "total": total_count,
                "rent": rent_count,
                "sale": sale_count
            }
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            return {}
    
    def clear_database(self):
        """–û—á–∏—â–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if os.path.exists(CHROMA_PATH):
            import shutil
            shutil.rmtree(CHROMA_PATH)
            print("üóëÔ∏è –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")
        else:
            print("‚ÑπÔ∏è –í–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
    parser.add_argument("--reset", action="store_true", help="–û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--populate", action="store_true", help="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("--limit", type=int, help="–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ—Å—Ç–∞")
    parser.add_argument("--stats", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    parser.add_argument("--search", type=str, help="–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    
    args = parser.parse_args()
    
    vector_db = RealEstateVectorDB()
    
    if args.reset:
        vector_db.clear_database()
    
    if args.populate:
        vector_db.populate_from_mongo(limit=args.limit)
    
    if args.stats:
        vector_db.get_stats()
    
    if args.search:
        print(f"üîç –ü–æ–∏—Å–∫: '{args.search}'")
        results = vector_db.semantic_search(args.search, top_k=5)
        for i, result in enumerate(results, 1):
            print(f"\n{i}. ID: {result['id']} (Score: {result['score']:.3f})")
            print(f"   –ö–æ–Ω—Ç–µ–Ω—Ç: {result['content'][:200]}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ MongoDB –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Å—ã–ª–∫–∏
            collection = collection_rent if result['metadata'].get('collection_type') == 'rent' else collection_sale
            full_data = collection.find_one({"_id": result['id']})
            if full_data and full_data.get('link'):
                print(f"   –°—Å—ã–ª–∫–∞: {full_data['link']}")


if __name__ == "__main__":
    main()
